next steps (week of 18.11.)
 x import stringdb (kind of done)
    ( requires ENSP -> ENSG mapping (or similarily))
    ( requires thus new id_mapping implementation)
 x look more closely at PSICQUIC (maybe i can load _all_ interactions without
     supplying all proteins)
   -> yep, easily, but parsing all of the results (differend ID types) might
      be a problem.
 x only use the sources that i don't yet have for interactions (i.e. exclude string)
 x check pdf document again (what needs to be added) and then send around
 - classify proteins into hk and ts and none-of-the-above
    - (use different classifications)
    - (design the software to be able to handle any classification, 
       or somehow multiples in parallel (so the pipeline doesn't
       have to be re run every single time the classification is changed)
 - checkout algohub networkit repo, look at algorithm, look at how to
   extend the algorithm (this will be a butt-load of work right here)
   - extension for parallel analysis/ finding of functionally related clusters
     (graph clustering by co-expression score) and tissue specific/identifying
      clusters (graph clustering by co-expression and low-expression score)
 x send weekly report by wednesday (include the overview thesis pdf)
 x venn diagram analysis (ctd)
    (overlap expr <-> expr, ppi<->ppi (ids and edges), ppi<->expr coverage)
    x ppi<->expr coverage
    - ppi<->ppi (ids and edges + expected analysis)
    (including graphs and text!!)
 - start writing down the related work
       (data sources especially are easy to start with)
   and basics (properly cite everything, get a book for basics to cite/refer to)
 - think about reason for the MIN() thing in id_mapping

 x see alexis notes on the thesis structure
 - read gatto's paper
 x start with networkit stuff (see meyerhenke's email)

 - create node label (tissue specificity) output/export
  POSSIBILITIES:
   - create list of all possible tissues, outer join to each single protein
     (-> so that all are in the same exact order (even if some are missing)
     then either read out by single protein and combine expressed values
     programmatically via python or somehow use a custom GROUP BY operator
     that concatenates strings with a definable seperator
     somehow use a configurable value for NULL (no match in outer join)


SELECT a.Gene,
group_concat(CASE WHEN a.Expressed IS NULL THEN '-' ELSE a.Expressed END, '|')
FROM hpa_tissues as b
LEFT OUTER JOIN hpa AS a
ON a.Type = b.Type
GROUP BY a.Gene
